//Server Imports
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include "Arduino.h"
#include <FastLED.h>
// #include <EEPROM.h>

//Service and Characteristic IDs
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

BLECharacteristic *pCharacteristic = nullptr; // Global declaration

//Event Callbacks to never stop advertising 
class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      Serial.println("Device connected");
    }

    void onDisconnect(BLEServer* pServer) {
      Serial.println("Device disconnected");
      BLEDevice::startAdvertising(); // Restart advertising
      Serial.println("Advertising started...");
    }
};

//LED Imports

// #include <EEPROM.h>

#define LED_PIN 9
#define NUM_LEDS 64
#define BRIGHTNESS 50  

int BlinkerSpeed = 75;

CRGB leds[NUM_LEDS];

void setup() {
  //Set baudrate 
  Serial.begin(115200);
  Serial.println("Starting BLE work!");

  //Setup Bluetooth
  //Init Server
  BLEDevice::init("XIAO_ESP32S3");
  BLEServer *pServer = BLEDevice::createServer();
  //Init Callback
  pServer->setCallbacks(new MyServerCallbacks());
  //Init Service
  BLEService *pService = pServer->createService(SERVICE_UUID);
  //Init Characteristic
  pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID,
                                         BLECharacteristic::PROPERTY_READ |
                                         BLECharacteristic::PROPERTY_WRITE
                                       );
  pCharacteristic->setValue("Hello World");
  //Init Advertising
  pService->start();
  // BLEAdvertising *pAdvertising = pServer->getAdvertising();  // this still is working for backward compatibility
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // functions that help with iPhone connections issue
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  Serial.println("Characteristic defined! Now you can read it in your phone!");

  //Setup LED
  //Init 
  FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(BRIGHTNESS);
}

const long RightArrow_Frame1[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,  
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
};

const long RightArrow_Frame2[] PROGMEM =
{
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
};

const long RightArrow_Frame3[] PROGMEM =
{
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
};

const long RightArrow_Frame4[] PROGMEM =
{
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,  
};

const long RightArrow_Frame5[] PROGMEM =
{
  0xffa500, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0xffa500, 
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
};

const long RightArrow_Frame6[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,
  0xffa500, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0xffa500, 
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long RightArrow_Frame7[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,
  0xffa500, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0xffa500, 
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long RightArrow_Frame8[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,  
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,
  0xffa500, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0xffa500, 
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
};

const long Blank[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

void RightBlinker() {
  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(RightArrow_Frame1[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(RightArrow_Frame2[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(RightArrow_Frame3[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(RightArrow_Frame4[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(RightArrow_Frame5[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(RightArrow_Frame6[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(RightArrow_Frame7[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(RightArrow_Frame8[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Blank[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);
}

const long LeftArrow_Frame1[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
};

const long LeftArrow_Frame2[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
};

const long LeftArrow_Frame3[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000,
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,  
};

const long LeftArrow_Frame4[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,  
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
};

const long LeftArrow_Frame5[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0xffa500, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0xffa500, 
};

const long LeftArrow_Frame6[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0xffa500, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0xffa500, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,
};

const long LeftArrow_Frame7[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0xffa500, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0xffa500, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
};

const long LeftArrow_Frame8[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000, 0x000000, 
  0x000000, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0xffa500, 0x000000,
  0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 0x000000, 0xffa500, 0xffa500, 
  0xffa500, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0xffa500, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
  0x000000, 0x000000, 0x000000, 0xffa500, 0xffa500, 0x000000, 0x000000, 0x000000, 
};

void LeftBlinker()
{
  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(LeftArrow_Frame1[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(LeftArrow_Frame2[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(LeftArrow_Frame3[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(LeftArrow_Frame4[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(LeftArrow_Frame5[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(LeftArrow_Frame6[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(LeftArrow_Frame7[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(LeftArrow_Frame8[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);

  FastLED.clear();
  for(int i = 0; i < NUM_LEDS; i++) 
  {
      leds[i] = pgm_read_dword(&(Blank[i]));  // Read array from Flash
  }
  FastLED.show();
  delay(BlinkerSpeed);
}

void loop() {
  // put your main code here, to run repeatedly:
  // delay(2000);

  if (pCharacteristic != nullptr) { // Check if pCharacteristic is initialized
    std::string value = pCharacteristic->getValue();
    String valueStr = String(value.c_str());

    if (valueStr == "Right") {
      RightBlinker(); 
    }

    if (valueStr == "Left") {
      LeftBlinker(); 
    }
  }

  
}